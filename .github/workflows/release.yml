name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'version.py'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '0.1.0'
      draft:
        description: 'Create release draft'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get version from version.py
        id: get_version
        run: |
          VERSION=$(python -c "import version; print(version.__version__)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            const newVersion = process.env.VERSION;
            let releaseExists = false;
            
            if (releases.length > 0) {
              const latestRelease = releases[0];
              console.log(`Latest release tag: ${latestRelease.tag_name}`);
              const latestVersion = latestRelease.tag_name.replace('v', '');
              console.log(`Latest version (without v): ${latestVersion}`);
              console.log(`New version: ${newVersion}`);
              releaseExists = (latestVersion === newVersion);
            } else {
              console.log("No releases found");
            }
            
            console.log(`Release exists: ${releaseExists}`);
            
            return releaseExists;
        env:
          VERSION: ${{ env.VERSION }}

      - name: Skip release if version already exists
        if: steps.check_release.outputs.result == 'true'
        run: |
          echo "Release for version ${{ env.VERSION }} already exists. Skipping release."
          exit 0

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: false

      - name: Trigger Docker Build and Push Workflow
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-build-push.yml',
              ref: context.ref,
              inputs: {
                version: process.env.VERSION
              }
            })

      - name: Wait for Docker Build and Push Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const maxAttempts = 30;
            const interval = 10000; // 10 seconds
            
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`Attempt ${attempt}/${maxAttempts}: Checking workflow status...`);
              
              // Get the list of workflow runs
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docker-build-push.yml',
                per_page: 5,
                page: 1
              });
              
              // Find the latest run
              const latestRun = workflowRuns.workflow_runs[0];
              
              if (latestRun) {
                console.log(`Latest workflow run status: ${latestRun.status}`);
                
                if (latestRun.status === 'completed') {
                  if (latestRun.conclusion === 'success') {
                    console.log('Docker build and push workflow completed successfully');
                    return;
                  } else {
                    throw new Error(`Docker build and push workflow failed with conclusion: ${latestRun.conclusion}`);
                  }
                }
              }
              
              if (attempt < maxAttempts) {
                console.log(`Waiting ${interval/1000} seconds before next check...`);
                await new Promise(resolve => setTimeout(resolve, interval));
              }
            }
            
            throw new Error('Docker build and push workflow did not complete within the expected time');